
import { PersonalityAnalysis } from "./types";
import { format } from "date-fns";

/**
 * Formats an analysis for download
 */
export const formatAnalysisForDownload = (analysis: PersonalityAnalysis) => {
  return {
    overview: analysis.overview,
    traits: analysis.traits.map(trait => ({
      trait: trait.trait,
      score: trait.score,
      description: trait.description,
      strengths: trait.strengths,
      challenges: trait.challenges,
      growthSuggestions: trait.growthSuggestions
    })),
    intelligence: {
      type: analysis.intelligence.type,
      score: analysis.intelligence.score,
      description: analysis.intelligence.description,
      domains: analysis.intelligence.domains
    },
    cognitiveStyle: analysis.cognitiveStyle,
    valueSystem: analysis.valueSystem,
    motivators: analysis.motivators,
    inhibitors: analysis.inhibitors,
    weaknesses: analysis.weaknesses,
    growthAreas: analysis.growthAreas,
    relationshipPatterns: analysis.relationshipPatterns,
    careerSuggestions: analysis.careerSuggestions,
    scores: {
      intelligence: analysis.intelligenceScore,
      emotionalIntelligence: analysis.emotionalIntelligenceScore
    },
    roadmap: analysis.roadmap,
    learningPathways: analysis.learningPathways,
    generatedAt: format(new Date(analysis.createdAt), 'PPP')
  };
};

/**
 * Generates a PDF report
 * This is a placeholder - in a real app, you would use a library like jsPDF
 */
export const generatePdfReport = (analysis: PersonalityAnalysis): string => {
  // This is a placeholder function
  // In a real implementation, you would use a PDF generation library
  
  // For now, we'll return a dummy data URL
  return `data:application/pdf;base64,`;
};

/**
 * Downloads a report in the specified format
 */
export const downloadReport = (analysis: PersonalityAnalysis, format: 'json' | 'pdf' = 'json') => {
  if (!analysis) {
    throw new Error("No analysis data to download");
  }
  
  try {
    if (format === 'json') {
      // Format the analysis data
      const formattedAnalysis = formatAnalysisForDownload(analysis);
      
      // Convert to JSON string
      const jsonStr = JSON.stringify(formattedAnalysis, null, 2);
      
      // Create a Blob with the JSON data
      const blob = new Blob([jsonStr], { type: 'application/json' });
      
      // Create a temporary download link
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `personality-analysis-${format(new Date(), 'yyyy-MM-dd')}.json`;
      
      // Trigger the download
      document.body.appendChild(a);
      a.click();
      
      // Clean up
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      return true;
    } else if (format === 'pdf') {
      // In a real implementation, you would generate a PDF file
      // For now, we'll use a mock function
      const pdfDataUrl = generatePdfReport(analysis);
      
      // Create a temporary download link
      const a = document.createElement('a');
      a.href = pdfDataUrl;
      a.download = `personality-analysis-${format(new Date(), 'yyyy-MM-dd')}.pdf`;
      
      // Trigger the download
      document.body.appendChild(a);
      a.click();
      
      // Clean up
      document.body.removeChild(a);
      
      return true;
    }
    
    return false;
  } catch (error) {
    console.error("Error downloading report:", error);
    throw error;
  }
};
